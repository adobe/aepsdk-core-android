apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 19
        //noinspection OldTargetApi
        targetSdkVersion 31
        //Include the Proguard rules for Core Extension in the aar
        consumerProguardFiles 'lib-proguard-rules.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    sourceSets {
        test{
            java{
                srcDirs += "src/legacy/test-common/java"
                srcDirs += "src/legacy/test-module/java"
                srcDirs += "src/test/kotlin"
            }
            resources{
                srcDirs += "src/legacy/test-module/resources"
            }
        }
        main{
            java{
                srcDirs += "src/legacy/main/java"
            }
        }
        androidTest{
            java.srcDirs += "src/legacy/androidTest-common/java"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    flavorDimensions "target"

    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
apply plugin: 'jacoco'
task jacocoTestReport(type: JacocoReport, dependsOn: ['testPhoneDebugUnitTest','createPhoneDebugCoverageReport']) {

    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes")

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.phone.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.main.java.sourceFiles)
    executionData.setFrom fileTree(dir: "$buildDir", includes: [
            "jacoco/testPhoneDebugUnitTest.exec",
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst{classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)}

        exclude "**/BuildConfig.java"
        exclude "**/R.java"
        options {
            links "https://developer.android.com/reference"
        }
    }
}


apply from: 'checkStyle.gradle'
//apply from: 'release.gradle'

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.coreExtensionName
            version = rootProject.coreExtensionVersion
            artifact("$buildDir/outputs/aar/${rootProject.coreExtensionAARName}")

            pom {
                name = rootProject.mavenRepoName
                description = rootProject.mavenRepoDescription
                url = 'https://aep-sdks.gitbook.io'
                licenses {
                    license {
                        name = 'Adobe Proprietary'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//Adobe-Marketing-Cloud/acp-sdks.git'
                    developerConnection = 'scm:git:ssh://github.com//Adobe-Marketing-Cloud/acp-sdks.git'
                    url = 'https://github.com/Adobe-Marketing-Cloud/acp-sdks'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'org.jetbrains.kotlin')
                    coreDependencyNode.appendNode('artifactId', 'kotlin-stdlib-jdk8')
                    coreDependencyNode.appendNode('version', rootProject.kotlin_version)
                }
            }
        }
    }
}
tasks.withType(Javadoc).all { enabled = false }
publish.dependsOn('assemblePhone')

dependencies {
    //noinspection GradleDependency,GradleCompatible
    implementation 'androidx.appcompat:appcompat:1.0.0'
    //noinspection GradleDependency
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // unit tests
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    //noinspection GradleDependency
    testImplementation 'commons-codec:commons-codec:1.15'
    testImplementation 'org.robolectric:robolectric:3.6.2'
    //noinspection GradleDependency
    testImplementation 'org.json:json:20160810'
    //noinspection GradleDependency
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // instrumentation tests
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_version"
}
