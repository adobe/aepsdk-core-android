/* *****************************************************************************
 * ADOBE CONFIDENTIAL
 * ___________________
 *
 * Copyright 2018 Adobe
 * All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 ******************************************************************************/

package com.adobe.marketing.mobile.identity;

import com.adobe.marketing.mobile.Event;
import com.adobe.marketing.mobile.EventSource;
import com.adobe.marketing.mobile.EventType;
import com.adobe.marketing.mobile.Log;

class DispatcherAnalyticsRequestContentIdentity extends ModuleEventDispatcher<IdentityExtension> {

	/**
	 * Name of the {@link Event} generated by this dispatcher
	 */
	private static final String ANALYTICS_FOR_IDENTITY_REQUEST_EVENT_NAME = "AnalyticsForIdentityRequest";

	/**
	 * Constructor
	 *
	 * @param hub {@link EventHub} instance used by this dispatcher
	 * @param extension parent {@link IdentityExtension} that owns this dispatcher
	 */
	DispatcherAnalyticsRequestContentIdentity(final EventHub hub, final IdentityExtension extension) {
		super(hub, extension);
	}

	/**
	 * Dispatches a request for an Analytics hit if the provided {@link EventData} is not null
	 *
	 * @param analyticsData {@link EventData} object containing IdentityExtension related data to be sent to Analytics
	 */
	void dispatchAnalyticsHit(final EventData analyticsData) {
		if (analyticsData == null) {
			Log.debug(IdentityExtension.LOG_SOURCE,
					  "dispatchAnalyticsHit : Unable to dispatch the analytics event without any analytics data.");
			return;
		}

		analyticsData.putBoolean(IdentityConstants.EventDataKeys.Analytics.TRACK_INTERNAL, true);

		final Event analyticsForMessageEvent = new Event.Builder(ANALYTICS_FOR_IDENTITY_REQUEST_EVENT_NAME,
				EventType.ANALYTICS, EventSource.REQUEST_CONTENT).setData(analyticsData).build();

		dispatch(analyticsForMessageEvent);
		Log.trace(IdentityExtension.LOG_SOURCE, "dispatchAnalyticsHit : Analytics event has been added to event hub : (%s)",
				  analyticsForMessageEvent);

	}
}
