/*
  Copyright 2022 Adobe. All rights reserved.
  This file is licensed to you under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software distributed under
  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
 */
// Todo
package com.adobe.marketing.mobile;
//
//import java.util.Map;
//import java.util.HashMap;
//import java.util.List;
//import java.util.ArrayList;
//import java.util.Arrays;

//// TODO : Replace Object with Variant once Glenn's changes are in.
//public class MobileIdentities {
//	// JSON key constants
//	private static final String JSON_KEY_COMPANYCONTEXTS = "companyContexts";
//	private static final String JSON_KEY_USERS           = "users";
//	private static final String JSON_KEY_USERIDS         = "userIDs";
//	private static final String JSON_KEY_NAMESPACE       = "namespace";
//	private static final String JSON_KEY_VALUE           = "value";
//	private static final String JSON_KEY_TYPE            = "type";
//	private static final String JSON_KEY_ANALYTICS_RSIDS = "rsids";
//
//	// JSON value constants
//	private static final String JSON_VALUE_NAMESPACE_COMPANYCONTEXTS     = "imsOrgID";
//	private static final String JSON_VALUE_NAMESPACE_ANALYTICS_AID       = "AVID";
//	private static final String JSON_VALUE_NAMESPACE_AUDIENCE_UUID       = "0";
//	private static final String JSON_VALUE_NAMESPACE_MCID                = "4";
//	private static final String JSON_VALUE_NAMESPACE_TARGET_THIRDPARTYID = "3rdpartyid";
//	private static final String JSON_VALUE_NAMESPACE_TARGET_TNTID        = "tntid";
//	private static final String JSON_VALUE_NAMESPACE_USERIDENTIFIER      = "vid";
//	private static final String JSON_VALUE_TYPE_ANALYTICS                = "analytics";
//	private static final String JSON_VALUE_TYPE_INTEGRATIONCODE          = "integrationCode";
//	private static final String JSON_VALUE_TYPE_TARGET                   = "target";
//	private static final String JSON_VALUE_TYPE_NAMESPACEID              = "namespaceId";
//	private static final String MCPNS_DPID             					 = "20919";
//	private static final String ADID_DSID			   				 	 = "DSID_20914";
//
//	// Shared state key constants
//
//	private MobileIdentities() {}
//
//
//	/**
//	 * Collects all the identities in the given string format from various modules.
//	 *
//	 * @param jsonUtilityService A {@link JsonUtilityService} instance from {@link PlatformServices} for creating a JSON string
//	 * @param event An {@link Event} generated by the GetSdkIdentities API
//	 * @param module An {@link Module} instance to retrieve the shared state information
//	 * @return A {@link String} with identities in json format
//	 */
//	static String getAllIdentifiers(final JsonUtilityService jsonUtilityService, final Event event,
//									final Module module) {
//		Log.trace(ConfigurationExtension.LOG_SOURCE, "Getting all identifiers from Configuration Extension");
//		Map<String, Object> identities = new HashMap<String, Object>();
//		List<Object> companyContexts = getCompanyContexts(event, module);
//
//		if (!companyContexts.isEmpty()) {
//			identities.put(JSON_KEY_COMPANYCONTEXTS, companyContexts);
//		}
//
//		List<Object> userIds = new ArrayList<Object>();
//		userIds.addAll(getAnalyticsIdentifiers(event, module));
//		userIds.addAll(getTargetIdentifiers(event, module));
//		userIds.addAll(getAudienceIdentifiers(event, module));
//		userIds.addAll(getVisitorIdentifiers(event, module));
//
//		if (!userIds.isEmpty()) {
//			List<Object> users = new ArrayList<Object>();
//			Map<String, Object> usersMap = new HashMap<String, Object>();
//			usersMap.put(JSON_KEY_USERIDS, userIds);
//			users.add(usersMap);
//			identities.put(JSON_KEY_USERS, users);
//		}
//
//		JsonUtilityService.JSONObject jsonObject = jsonUtilityService.createJSONObject(identities);
//		return jsonObject.toString();
//	}
//
//	/**
//	 * Verifies none of the shared states required for the GetSDKIdentities API are in PENDING State.
//	 * <p>
//	 * The required shared states are:
//	 * <ol>
//	 *     <li>{@code Analytics}</li>
//	 *     <li>{@code Audience}</li>
//	 *     <li>{@link ConfigurationExtension}</li>
//	 *     <li>{@code Identity}</li>
//	 *     <li>{@code Target}</li>
//	 * </ol>
//	 *
//	 * <p>
//	 *  Returns true, if the all the above shared state are valid.
//	 *  Returns false, if any one of the above shared state is in {@link EventHub#SHARED_STATE_PENDING}.
//	 *
//	 * @param event An {@link Event} generated by the GetSdkIdentities API
//	 * @param module An {@link Module} instance to retrieve the shared state
//	 * @return A {@code boolean} indicating the availability of the required module shared state
//	 */
//	static boolean areAllSharedStatesReady(final Event event, final Module module) {
//		// verify if Identity shared state is pending
//		if (module.hasSharedEventState(ConfigurationConstants.SharedStateKeys.Identity.MODULE_NAME)
//				&& module.getSharedEventState(ConfigurationConstants.SharedStateKeys.Identity.MODULE_NAME,
//											  event) == EventHub.SHARED_STATE_PENDING) {
//			Log.trace(ConfigurationExtension.LOG_SOURCE, "Identity module shared state is not ready");
//			return false;
//		}
//
//		// verify if Analytics shared state is pending
//		if (module.hasSharedEventState(ConfigurationConstants.SharedStateKeys.Analytics.MODULE_NAME)
//				&& module.getSharedEventState(ConfigurationConstants.SharedStateKeys.Analytics.MODULE_NAME,
//											  event) == EventHub.SHARED_STATE_PENDING) {
//			Log.trace(ConfigurationExtension.LOG_SOURCE, "Analytics module shared state is not ready");
//			return false;
//		}
//
//		// verify if Target shared state is pending
//		if (module.hasSharedEventState(ConfigurationConstants.SharedStateKeys.Target.MODULE_NAME)
//				&& module.getSharedEventState(ConfigurationConstants.SharedStateKeys.Target.MODULE_NAME,
//											  event) == EventHub.SHARED_STATE_PENDING) {
//			Log.trace(ConfigurationExtension.LOG_SOURCE, "Target module shared state is not ready");
//			return false;
//		}
//
//		// verify if Audience shared state is pending
//		if (module.hasSharedEventState(ConfigurationConstants.SharedStateKeys.Audience.MODULE_NAME)
//				&& module.getSharedEventState(ConfigurationConstants.SharedStateKeys.Audience.MODULE_NAME,
//											  event) == EventHub.SHARED_STATE_PENDING) {
//			Log.trace(ConfigurationExtension.LOG_SOURCE, "Audience module shared state is not ready");
//			return false;
//		}
//
//		// verify if Configuration shared state is pending
//		if (module.hasSharedEventState(ConfigurationConstants.EventDataKeys.Configuration.MODULE_NAME)
//				&& module.getSharedEventState(ConfigurationConstants.EventDataKeys.Configuration.MODULE_NAME,
//											  event) == EventHub.SHARED_STATE_PENDING) {
//			Log.trace(ConfigurationExtension.LOG_SOURCE, "Configuration module shared state is not ready");
//			return false;
//		}
//
//		Log.trace(ConfigurationExtension.LOG_SOURCE, "All shared states are ready");
//		return true;
//	}
//
//	// ========================================================
//	// private methods
//	// ========================================================
//
//	/**
//	 * Gets the required identities from Audience Module.
//	 * <p>
//	 * A List of map in the following format will be appended depending the availability of the {@code Audience} shared state.
//	 * [{ "namespace" : "0", "value" : "AAM_UUID", "type" : "namespaceId" },
//	 * { "namespace" : "AAM_DPID", "value" : "AAM_DPUUID", "type" : "namespaceId" }]
//	 *
//	 * An empty list will be returned if the {@code Audience} shared state is invalid or null.
//	 *
//	 * @param event An {@link Event} generated by the GetSdkIdentities API
//	 * @param module An {@link Module} instance to retrieve the {@code Audience} shared state
//	 * @return {@link List} containing Audience Identities
//	 */
//	private static List<Object> getAudienceIdentifiers(final Event event, final Module module) {
//		List<Object> audienceIds = new ArrayList<Object>();
//
//		EventData audienceSharedState = module.getSharedEventState(ConfigurationConstants.SharedStateKeys.Audience.MODULE_NAME,
//										event);
//
//		// return empty list if the shared state is empty
//		if (!isSharedStateValid(audienceSharedState)) {
//			return audienceIds;
//		}
//
//		// audience manager dpid and dpuuid
//		String audienceDpuuid = audienceSharedState.optString(ConfigurationConstants.SharedStateKeys.Audience.DPUUID, null);
//
//		if (!StringUtils.isNullOrEmpty(audienceDpuuid)) {
//			String audienceDpid = audienceSharedState.optString(ConfigurationConstants.SharedStateKeys.Audience.DPID, "");
//			audienceIds.add(createUserIdMap(audienceDpid, audienceDpuuid, JSON_VALUE_TYPE_NAMESPACEID));
//		}
//
//		// audience manager uuid
//		String audienceUuid = audienceSharedState.optString(ConfigurationConstants.SharedStateKeys.Audience.UUID, null);
//
//		if (!StringUtils.isNullOrEmpty(audienceUuid)) {
//			audienceIds.add(createUserIdMap(JSON_VALUE_NAMESPACE_AUDIENCE_UUID, audienceUuid, JSON_VALUE_TYPE_NAMESPACEID));
//		}
//
//		return audienceIds;
//	}
//
//	/**
//	 * Gets the required identities from Target Module.
//	 * <p>
//	 * A List of map in the following format will be appended depending the availability of the {@code Target} shared state.
//	 * [{ "namespace" : "tntid", "value" : "TNTID", "type" : "target" },
//	 * { "namespace" : "3rdpartyid", "value" : "TNT3RDPARTYID", "type" : "target" }]
//	 *
//	 * An empty list will be returned if the {@code Target} shared state is invalid or null.
//	 *
//	 * @param event An {@link Event} generated by the GetSdkIdentities API
//	 * @param module An {@link Module} instance to retrieve the {@code Target} shared state
//	 * @return {@link List} containing Target Identities
//	 */
//	private static List<Object> getTargetIdentifiers(final Event event, final Module module) {
//		List<Object> targetIds = new ArrayList<Object>();
//
//
//		EventData targetSharedState = module.getSharedEventState(ConfigurationConstants.SharedStateKeys.Target.MODULE_NAME,
//									  event);
//
//		// return empty list if the shared state is empty
//		if (!isSharedStateValid(targetSharedState)) {
//			return targetIds;
//		}
//
//		// target tnt id
//		String tntId = targetSharedState.optString(ConfigurationConstants.SharedStateKeys.Target.TNT_ID, null);
//
//		if (!StringUtils.isNullOrEmpty(tntId)) {
//			targetIds.add(createUserIdMap(JSON_VALUE_NAMESPACE_TARGET_TNTID, tntId, JSON_VALUE_TYPE_TARGET));
//		}
//
//		// third party id
//		String thirdPartyId = targetSharedState.optString(ConfigurationConstants.SharedStateKeys.Target.THIRD_PARTY_ID, null);
//
//		if (!StringUtils.isNullOrEmpty(thirdPartyId)) {
//			targetIds.add(createUserIdMap(JSON_VALUE_NAMESPACE_TARGET_THIRDPARTYID, thirdPartyId, JSON_VALUE_TYPE_TARGET));
//		}
//
//		return targetIds;
//	}
//
//	/**
//	 * Gets the required identities from Analytics Module.
//	 * <p>
//	 * A List of map in the following format will be appended depending the availability of the {@code Analytics} shared state.
//	 * [ { "namespace" : "avid", "value" : "AID", "type" : "integrationCode" },
//	 * { "namespace" : "vid", "value" : "VID", "type" : "analytics", "rsids" : [ "rsid1", "rsid2", ... ] }]
//	 *
//	 * An empty list will be returned if the {@code Analytics} shared state is invalid or null.
//	 *
//	 * @param event An {@link Event} generated by the GetSdkIdentities API
//	 * @param module An {@link Module} instance to retrieve the {@code Analytics} shared state
//	 * @return {@link List} containing Analytics Identities
//	 */
//	private static List<Object> getAnalyticsIdentifiers(final Event event, final Module module) {
//		List<Object> analyticsIds = new ArrayList<Object>();
//
//
//		EventData analyticsSharedState = module.getSharedEventState(
//											 ConfigurationConstants.SharedStateKeys.Analytics.MODULE_NAME,
//											 event);
//
//		// return empty list if the shared state is empty
//		if (!isSharedStateValid(analyticsSharedState)) {
//			return analyticsIds;
//		}
//
//		// analytics identifier (aid)
//		String aid = analyticsSharedState.optString(ConfigurationConstants.SharedStateKeys.Analytics.ANALYTICS_ID, null);
//
//		if (!StringUtils.isNullOrEmpty(aid)) {
//			analyticsIds.add(createUserIdMap(JSON_VALUE_NAMESPACE_ANALYTICS_AID, aid, JSON_VALUE_TYPE_INTEGRATIONCODE));
//		}
//
//		// analytics custom visitor id (userIdentifier)
//		String userIdentifier = analyticsSharedState.optString(ConfigurationConstants.SharedStateKeys.Analytics.USER_IDENTIFIER,
//								null);
//
//		if (!StringUtils.isNullOrEmpty(userIdentifier)) {
//			Map<String, Object> customVisitorIdMap = createUserIdMap(JSON_VALUE_NAMESPACE_USERIDENTIFIER, userIdentifier,
//					JSON_VALUE_TYPE_ANALYTICS);
//
//			EventData configurationSharedState = module.getSharedEventState(
//					ConfigurationConstants.EventDataKeys.Configuration.MODULE_NAME, event);
//
//			if (!isSharedStateValid(configurationSharedState)) {
//				return analyticsIds;
//			}
//
//			String commaSeparatedRsids = configurationSharedState.optString(
//											 ConfigurationConstants.SharedStateKeys.Configuration.ANALYTICS_CONFIG_REPORT_SUITES, null);
//
//			if (!StringUtils.isNullOrEmpty(commaSeparatedRsids)) {
//				customVisitorIdMap.put(JSON_KEY_ANALYTICS_RSIDS, Arrays.asList(commaSeparatedRsids.split(",")));
//			}
//
//			analyticsIds.add(customVisitorIdMap);
//		}
//
//		return analyticsIds;
//	}
//
//
//	/**
//	 * Gets the required identities from Identity Module.
//	 * <p>
//	 * A List of map in the following format will be appended depending the availability of the {@code Identity} shared state.
//	 * [ { "namespace" : "INTEGRATION CODE", "value" : "ID", "type" : "integrationCode" },
//	 *  { "namespace" : "4",                   "value" : "MCID", "type" : "namespaceId" },
//	 *  { "namespace" : "20919",               "value" : "PUSHID", "type" : "integrationCode" },
//	 *  { "namespace" : "DSID_20914",          "value" : "ADID", "type" : "integrationCode" },
//	 * ]
//	 *
//	 * An empty list will be returned if the {@code Identity} shared state is invalid or null.
//	 *
//	 * @param event An {@link Event} generated by the GetSdkIdentities API
//	 * @param module An {@link Module} instance to retrieve the {@code Identity} shared state
//	 * @return {@link List} containing Visitor Identities
//	 */
//	private static List<Object> getVisitorIdentifiers(final Event event, final Module module) {
//		List<Object> visitorIds = new ArrayList<Object>();
//
//
//		EventData identitySharedState = module.getSharedEventState(ConfigurationConstants.SharedStateKeys.Identity.MODULE_NAME,
//										event);
//
//		// return empty list if the shared state is empty
//		if (!isSharedStateValid(identitySharedState)) {
//			return visitorIds;
//		}
//
//		// marketing cloud id
//		String marketingCloudId = identitySharedState.optString(ConfigurationConstants.SharedStateKeys.Identity.MID, null);
//
//		if (!StringUtils.isNullOrEmpty(marketingCloudId)) {
//			visitorIds.add(createUserIdMap(JSON_VALUE_NAMESPACE_MCID, marketingCloudId, JSON_VALUE_TYPE_NAMESPACEID));
//		}
//
//		// visitor ids and advertising id
//		// Identity sets the advertising identifier both in ‘visitoridslist’ and as ‘advertisingidentifer’ in the Identity shared state.
//		// So, there is no need to fetch the advertising identifier with advertisingidentifer namespace DSID_20914 separately.
//		final List<VisitorID> customVisitorIDs = identitySharedState.optTypedList(
//					ConfigurationConstants.SharedStateKeys.Identity.VISITOR_IDS_LIST,
//					null,
//					VisitorID.VARIANT_SERIALIZER);
//
//		if (customVisitorIDs != null && !customVisitorIDs.isEmpty()) {
//			for (VisitorID visitorID : customVisitorIDs) {
//				if (!StringUtils.isNullOrEmpty(visitorID.getId())) {
//					visitorIds.add(createUserIdMap(visitorID.getIdType(), visitorID.getId(), JSON_VALUE_TYPE_INTEGRATIONCODE));
//				}
//			}
//		}
//
//
//		// push id
//		String pushId = identitySharedState.optString(ConfigurationConstants.SharedStateKeys.Identity.PUSH_IDENTIFIER, null);
//
//		if (!StringUtils.isNullOrEmpty(pushId)) {
//			visitorIds.add(createUserIdMap(MCPNS_DPID, pushId, JSON_VALUE_TYPE_INTEGRATIONCODE));
//		}
//
//
//		return visitorIds;
//	}
//
//	/**
//	 * Gets the company context map in the following format.
//	 * <p>
//	 *  "companyContexts": [
//	 *   { "namespace": "imsOrgID", "value": "ORGID" }
//	 *    ]
//	 * <p>
//	 * Returns null if the {@code Configuration} shared state is invalid or null.
//	 * Returns null if the {@code Configuration} shared state is valid and marketingCloudID cannot be found
//	 * in {@code ConfigurationExtension} shared state.
//	 *
//	 * @param event An {@link Event} generated by the GetSdkIdentities API
//	 * @param module An {@link Module} instance to retrieve the {@code Identity} shared state
//	 * @return {@link List} representing company context
//	 */
//	private static List<Object> getCompanyContexts(final Event event, final Module module) {
//		List<Object> companyContextsList = new ArrayList<Object>();
//
//		EventData configurationSharedState = module.getSharedEventState(
//				ConfigurationConstants.EventDataKeys.Configuration.MODULE_NAME, event);
//
//		// proceed only if configuration shared state is valid.
//		if (isSharedStateValid(configurationSharedState)) {
//			String marketingCloudOrgId = configurationSharedState.optString(
//											 ConfigurationConstants.SharedStateKeys.Configuration.CONFIG_EXPERIENCE_CLOUD_ORGID_KEY, null);
//
//			if (!StringUtils.isNullOrEmpty(marketingCloudOrgId)) {
//				Map<String, Object> companyContextMap = new HashMap<String, Object>();
//				companyContextMap.put(JSON_KEY_NAMESPACE, JSON_VALUE_NAMESPACE_COMPANYCONTEXTS);
//				companyContextMap.put(JSON_KEY_VALUE, marketingCloudOrgId);
//				companyContextsList.add(companyContextMap);
//				return companyContextsList;
//			}
//		}
//
//		return companyContextsList;
//	}
//
//
//	/**
//	 * Helper method to create a userID {@code Map}.
//	 *
//	 * @param namespace A {@code String} representing namespace
//	 * @param value An {@code String} representing value
//	 * @param type An {@code String} representing type
//	 * @return An UserID {@link Map}
//	 */
//	private static Map<String, Object> createUserIdMap(final String namespace, final String value, final String type) {
//		Map<String, Object> userIdMap = new HashMap<String, Object>();
//		userIdMap.put(JSON_KEY_NAMESPACE, namespace);
//		userIdMap.put(JSON_KEY_VALUE, value);
//		userIdMap.put(JSON_KEY_TYPE, type);
//		return userIdMap;
//	}
//
//	/**
//	 * Verifies if the given shared state is valid.
//	 * <p>
//	 * Returns false, if the give provided sharedState is invalid or pending. True otherwise.
//	 *
//	 * @param sharedState An {@link EventData} representing a shared state
//	 * @return {@code boolean} value representing the validity of the shared state
//	 */
//	private static boolean isSharedStateValid(final EventData sharedState) {
//		return !(sharedState == EventHub.SHARED_STATE_INVALID || sharedState == EventHub.SHARED_STATE_PENDING);
//	}
//
//}
