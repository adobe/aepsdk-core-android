apply plugin: 'signing'
if (project.hasProperty("signKeyLoc") && project.hasProperty("signKeyId") && project.hasProperty("signPass")) {
    ext["signing.secretKeyRingFile"] = "$signKeyLoc"
    ext["signing.keyId"] = "$signKeyId"
    ext["signing.password"] = "$signPass"
}

task javadoc(type: Javadoc) {
    source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
//    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
//    classpath += files(ext.androidJar)
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.encoding = 'UTF-8'
    exclude "**/BuildConfig.java"
    exclude "**/R.java"
    options {
        links "https://developer.android.com/reference"
        noDeprecated true
//        linksOffline "https://developer.android.com/reference", "file:///${android.sdkDirectory}/docs/reference"
    }

}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

task javadocPublish(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? rootProject.coreExtensionVersion : rootProject.coreExtensionVersion+"-SNAPSHOT"

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.coreExtensionName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.coreExtensionAARName}")
            artifact javadocPublish

            pom {
                name = rootProject.mavenRepoName
                description = rootProject.mavenRepoDescription
                url = 'https://aep-sdks.gitbook.io'
                licenses {
                    license {
                        name = 'Adobe Proprietary'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//Adobe-Marketing-Cloud/acp-sdks.git'
                    developerConnection = 'scm:git:ssh://github.com//Adobe-Marketing-Cloud/acp-sdks.git'
                    url = 'https://github.com/Adobe-Marketing-Cloud/acp-sdks'
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
    }
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("publishReleasePublicationToSonatypeRepository") }
    sign publishing.publications.release
}

publishReleasePublicationToSonatypeRepository.dependsOn('assemblePhone')