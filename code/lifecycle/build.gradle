apply plugin: 'com.android.library'
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion rootProject.ext.targetSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        //noinspection OldTargetApi
        targetSdkVersion rootProject.ext.targetSdkVersion
        //Include the Proguard rules for Core Extension in the aar
        consumerProguardFiles 'lib-proguard-rules.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    sourceSets {
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    flavorDimensions "target"

    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
}

apply from: '../checkstyle.gradle'
apply from: '../codeformat.gradle'
apply from: '../jacoco.gradle'

def isJitPackBuild() {
    return hasProperty('jitpack')
}

def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? rootProject.lifecycleExtensionVersion : rootProject.lifecycleExtensionVersion + "-SNAPSHOT"

def groupIdForPublish = isJitPackBuild() ? 'com.github.adobe.aepsdk-core-android' : 'com.adobe.marketing.mobile'

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst{classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)}

        exclude "**/BuildConfig.java"
        exclude "**/R.java"
        options {
            links "https://developer.android.com/reference"
        }
    }
}

task javadocPublic(type: Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadocPublic
    archiveClassifier.set('javadoc')
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = groupIdForPublish
            artifactId = rootProject.lifecycleExtensionName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.lifecycleExtensionAARName}")
            artifact javadocPublish
            pom {
                name = rootProject.mavenRepoName
                description = rootProject.mavenRepoDescription
                url = 'https://developer.adobe.com/client-sdks'
                licenses {
                    license {
                        name = 'Adobe Proprietary'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//adobe/aepsdk-core-android.git'
                    developerConnection = 'scm:git:ssh://github.com//adobe/aepsdk-core-android.git'
                    url = 'https://github.com/adobe/aepsdk-core-android'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    coreDependencyNode.appendNode('artifactId', 'core')
                    coreDependencyNode.appendNode('version', rootProject.coreExtensionVersion)
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }

}

ext."signing.gnupg.executable" = "gpg"
ext."signing.gnupg.keyName" = System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase" = System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

publishToMavenLocal.dependsOn('assemblePhone')

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation project(path: ':core')
    // Unit tests
    testImplementation "junit:junit:4.13.2"
    //noinspection GradleDependency
    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation 'commons-codec:commons-codec:1.15'
    testImplementation 'org.robolectric:robolectric:3.6.2'
    //noinspection GradleDependency
    testImplementation 'org.json:json:20160810'
    // Instrumentation tests
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
}
